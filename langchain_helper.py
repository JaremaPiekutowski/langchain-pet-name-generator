from langchain.chains.llm import LLMChain
from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from dotenv import load_dotenv

# Load the environment variables from the .env file
load_dotenv()


def generate_pet_names(animal_type: str, pet_color: str) -> str:
    '''
    This function generates pet names based on the animal type and the color.
    Args:
        animal_type (str): The type of the animal.
        pet_color (str): The color of the pet.
    Returns:
        pet_names (str): The pet names generated by the agent.
    '''
    # Create an instance of the OpenAI class
    llm = OpenAI(
        temperature=0.7,
    )

    # Create a prompt template
    prompt_template_name = PromptTemplate(
        input_variables=['animal_type', 'pet_color'],
        template=(
            "I have a pet {animal_type} and I want a cool name for it. "
            "The pet is {pet_color}. Suggest me five cool names for my pet."
        )
    )

    # Create a chain with the LLM and the prompt template
    # Output key will enable us to get text from the response dictionary
    # by "response['output_key']"
    name_chain = LLMChain(
        llm=llm,
        prompt=prompt_template_name,
        output_key='pet_names',
        )

    # Generate the pet names by getting response from the chain
    response = name_chain(
        {
            'animal_type': animal_type,
            'pet_color': pet_color,
            }
        )

    return response


if __name__ == "__main__":
    print(generate_pet_names("dog", "black and white"))
